datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Table {
  bookings        Booking[]
  createdAt       DateTime      @default(now())
  id              String        @id @default(cuid())
  reservations    Reservation[]
  restaurant      Restaurant?   @relation(fields: [restaurantId], references: [id])
  restaurantId    String?
  seatingCapacity Int?
  tableNumber     Int?
  timeSlots       TimeSlot[]
  updatedAt       DateTime      @updatedAt
}

model Restaurant {
  address             String?
  createdAt           DateTime             @default(now())
  id                  String               @id @default(cuid())
  name                String?
  phoneNumber         String?
  reservationBookings ReservationBooking[]
  seatings            Seating[]
  tables              Table[]
  updatedAt           DateTime             @updatedAt
}

model Booking {
  bookingTime DateTime?
  createdAt   DateTime           @default(now())
  customer    Customer?          @relation(fields: [customerId], references: [id])
  customerId  String?
  id          String             @id @default(cuid())
  status      EnumBookingStatus?
  table       Table?             @relation(fields: [tableId], references: [id])
  tableId     String?
  updatedAt   DateTime           @updatedAt
}

model Customer {
  bookings     Booking[]
  createdAt    DateTime      @default(now())
  email        String?
  id           String        @id @default(cuid())
  name         String?
  phoneNumber  String?
  reservations Reservation[]
  updatedAt    DateTime      @updatedAt
}

model TimeSlot {
  createdAt    DateTime      @default(now())
  endTime      DateTime?
  id           String        @id @default(cuid())
  reservations Reservation[]
  startTime    DateTime?
  table        Table?        @relation(fields: [tableId], references: [id])
  tableId      String?
  updatedAt    DateTime      @updatedAt
}

model Reservation {
  createdAt  DateTime  @default(now())
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
  date       DateTime?
  id         String    @id @default(cuid())
  table      Table?    @relation(fields: [tableId], references: [id])
  tableId    String?
  timeSlot   TimeSlot? @relation(fields: [timeSlotId], references: [id])
  timeSlotId String?
  updatedAt  DateTime  @updatedAt
}

model Person {
  createdAt           DateTime             @default(now())
  id                  String               @id @default(cuid())
  reservationBookings ReservationBooking[]
  updatedAt           DateTime             @updatedAt
}

model SpecialHours {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
}

model WeeklyOpeningHours {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
}

model TableGroup {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
}

model User {
  createdAt DateTime @default(now())
  email     String?  @unique
  firstName String?
  id        String   @id @default(cuid())
  lastName  String?
  password  String
  roles     Json
  updatedAt DateTime @updatedAt
  username  String   @unique
}

model Seating {
  createdAt       DateTime    @default(now())
  id              String      @id @default(cuid())
  restaurant      Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId    String?
  seatingCapacity Int?
  tableNumber     Int?
  updatedAt       DateTime    @updatedAt
}

model DiningPlace {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  name      String?
  ownerId   String?
  updatedAt DateTime @updatedAt
}

model ReservationBooking {
  createdAt       DateTime    @default(now())
  endTime         DateTime?
  id              String      @id @default(cuid())
  numberOfPersons Int?
  person          Person?     @relation(fields: [personId], references: [id])
  personId        String?
  restaurant      Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId    String?
  startTime       DateTime?
  updatedAt       DateTime    @updatedAt
}

enum EnumBookingStatus {
  Option1
}
