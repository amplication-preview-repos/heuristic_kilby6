/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TableGroupService } from "../tableGroup.service";
import { TableGroupCreateInput } from "./TableGroupCreateInput";
import { TableGroup } from "./TableGroup";
import { TableGroupFindManyArgs } from "./TableGroupFindManyArgs";
import { TableGroupWhereUniqueInput } from "./TableGroupWhereUniqueInput";
import { TableGroupUpdateInput } from "./TableGroupUpdateInput";

export class TableGroupControllerBase {
  constructor(protected readonly service: TableGroupService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TableGroup })
  async createTableGroup(
    @common.Body() data: TableGroupCreateInput
  ): Promise<TableGroup> {
    return await this.service.createTableGroup({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TableGroup] })
  @ApiNestedQuery(TableGroupFindManyArgs)
  async tableGroups(@common.Req() request: Request): Promise<TableGroup[]> {
    const args = plainToClass(TableGroupFindManyArgs, request.query);
    return this.service.tableGroups({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TableGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tableGroup(
    @common.Param() params: TableGroupWhereUniqueInput
  ): Promise<TableGroup | null> {
    const result = await this.service.tableGroup({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TableGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTableGroup(
    @common.Param() params: TableGroupWhereUniqueInput,
    @common.Body() data: TableGroupUpdateInput
  ): Promise<TableGroup | null> {
    try {
      return await this.service.updateTableGroup({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TableGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTableGroup(
    @common.Param() params: TableGroupWhereUniqueInput
  ): Promise<TableGroup | null> {
    try {
      return await this.service.deleteTableGroup({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
