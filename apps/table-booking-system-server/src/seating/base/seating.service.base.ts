/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Seating as PrismaSeating,
  Restaurant as PrismaRestaurant,
} from "@prisma/client";

export class SeatingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SeatingCountArgs, "select">): Promise<number> {
    return this.prisma.seating.count(args);
  }

  async seatings(args: Prisma.SeatingFindManyArgs): Promise<PrismaSeating[]> {
    return this.prisma.seating.findMany(args);
  }
  async seating(
    args: Prisma.SeatingFindUniqueArgs
  ): Promise<PrismaSeating | null> {
    return this.prisma.seating.findUnique(args);
  }
  async createSeating(args: Prisma.SeatingCreateArgs): Promise<PrismaSeating> {
    return this.prisma.seating.create(args);
  }
  async updateSeating(args: Prisma.SeatingUpdateArgs): Promise<PrismaSeating> {
    return this.prisma.seating.update(args);
  }
  async deleteSeating(args: Prisma.SeatingDeleteArgs): Promise<PrismaSeating> {
    return this.prisma.seating.delete(args);
  }

  async getRestaurant(parentId: string): Promise<PrismaRestaurant | null> {
    return this.prisma.seating
      .findUnique({
        where: { id: parentId },
      })
      .restaurant();
  }
}
