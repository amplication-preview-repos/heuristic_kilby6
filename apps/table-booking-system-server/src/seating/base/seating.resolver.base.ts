/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Seating } from "./Seating";
import { SeatingCountArgs } from "./SeatingCountArgs";
import { SeatingFindManyArgs } from "./SeatingFindManyArgs";
import { SeatingFindUniqueArgs } from "./SeatingFindUniqueArgs";
import { CreateSeatingArgs } from "./CreateSeatingArgs";
import { UpdateSeatingArgs } from "./UpdateSeatingArgs";
import { DeleteSeatingArgs } from "./DeleteSeatingArgs";
import { Restaurant } from "../../restaurant/base/Restaurant";
import { SeatingService } from "../seating.service";
@graphql.Resolver(() => Seating)
export class SeatingResolverBase {
  constructor(protected readonly service: SeatingService) {}

  async _seatingsMeta(
    @graphql.Args() args: SeatingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Seating])
  async seatings(
    @graphql.Args() args: SeatingFindManyArgs
  ): Promise<Seating[]> {
    return this.service.seatings(args);
  }

  @graphql.Query(() => Seating, { nullable: true })
  async seating(
    @graphql.Args() args: SeatingFindUniqueArgs
  ): Promise<Seating | null> {
    const result = await this.service.seating(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Seating)
  async createSeating(
    @graphql.Args() args: CreateSeatingArgs
  ): Promise<Seating> {
    return await this.service.createSeating({
      ...args,
      data: {
        ...args.data,

        restaurant: args.data.restaurant
          ? {
              connect: args.data.restaurant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Seating)
  async updateSeating(
    @graphql.Args() args: UpdateSeatingArgs
  ): Promise<Seating | null> {
    try {
      return await this.service.updateSeating({
        ...args,
        data: {
          ...args.data,

          restaurant: args.data.restaurant
            ? {
                connect: args.data.restaurant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Seating)
  async deleteSeating(
    @graphql.Args() args: DeleteSeatingArgs
  ): Promise<Seating | null> {
    try {
      return await this.service.deleteSeating(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Restaurant, {
    nullable: true,
    name: "restaurant",
  })
  async getRestaurant(
    @graphql.Parent() parent: Seating
  ): Promise<Restaurant | null> {
    const result = await this.service.getRestaurant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
