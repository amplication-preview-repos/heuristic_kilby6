/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SeatingService } from "../seating.service";
import { SeatingCreateInput } from "./SeatingCreateInput";
import { Seating } from "./Seating";
import { SeatingFindManyArgs } from "./SeatingFindManyArgs";
import { SeatingWhereUniqueInput } from "./SeatingWhereUniqueInput";
import { SeatingUpdateInput } from "./SeatingUpdateInput";

export class SeatingControllerBase {
  constructor(protected readonly service: SeatingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Seating })
  async createSeating(
    @common.Body() data: SeatingCreateInput
  ): Promise<Seating> {
    return await this.service.createSeating({
      data: {
        ...data,

        restaurant: data.restaurant
          ? {
              connect: data.restaurant,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        restaurant: {
          select: {
            id: true,
          },
        },

        seatingCapacity: true,
        tableNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Seating] })
  @ApiNestedQuery(SeatingFindManyArgs)
  async seatings(@common.Req() request: Request): Promise<Seating[]> {
    const args = plainToClass(SeatingFindManyArgs, request.query);
    return this.service.seatings({
      ...args,
      select: {
        createdAt: true,
        id: true,

        restaurant: {
          select: {
            id: true,
          },
        },

        seatingCapacity: true,
        tableNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Seating })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async seating(
    @common.Param() params: SeatingWhereUniqueInput
  ): Promise<Seating | null> {
    const result = await this.service.seating({
      where: params,
      select: {
        createdAt: true,
        id: true,

        restaurant: {
          select: {
            id: true,
          },
        },

        seatingCapacity: true,
        tableNumber: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Seating })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSeating(
    @common.Param() params: SeatingWhereUniqueInput,
    @common.Body() data: SeatingUpdateInput
  ): Promise<Seating | null> {
    try {
      return await this.service.updateSeating({
        where: params,
        data: {
          ...data,

          restaurant: data.restaurant
            ? {
                connect: data.restaurant,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          restaurant: {
            select: {
              id: true,
            },
          },

          seatingCapacity: true,
          tableNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Seating })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSeating(
    @common.Param() params: SeatingWhereUniqueInput
  ): Promise<Seating | null> {
    try {
      return await this.service.deleteSeating({
        where: params,
        select: {
          createdAt: true,
          id: true,

          restaurant: {
            select: {
              id: true,
            },
          },

          seatingCapacity: true,
          tableNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
