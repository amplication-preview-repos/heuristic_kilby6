/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SpecialHoursService } from "../specialHours.service";
import { SpecialHoursCreateInput } from "./SpecialHoursCreateInput";
import { SpecialHours } from "./SpecialHours";
import { SpecialHoursFindManyArgs } from "./SpecialHoursFindManyArgs";
import { SpecialHoursWhereUniqueInput } from "./SpecialHoursWhereUniqueInput";
import { SpecialHoursUpdateInput } from "./SpecialHoursUpdateInput";

export class SpecialHoursControllerBase {
  constructor(protected readonly service: SpecialHoursService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SpecialHours })
  async createSpecialHours(
    @common.Body() data: SpecialHoursCreateInput
  ): Promise<SpecialHours> {
    return await this.service.createSpecialHours({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SpecialHours] })
  @ApiNestedQuery(SpecialHoursFindManyArgs)
  async specialHoursItems(
    @common.Req() request: Request
  ): Promise<SpecialHours[]> {
    const args = plainToClass(SpecialHoursFindManyArgs, request.query);
    return this.service.specialHoursItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SpecialHours })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async specialHours(
    @common.Param() params: SpecialHoursWhereUniqueInput
  ): Promise<SpecialHours | null> {
    const result = await this.service.specialHours({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SpecialHours })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSpecialHours(
    @common.Param() params: SpecialHoursWhereUniqueInput,
    @common.Body() data: SpecialHoursUpdateInput
  ): Promise<SpecialHours | null> {
    try {
      return await this.service.updateSpecialHours({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SpecialHours })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSpecialHours(
    @common.Param() params: SpecialHoursWhereUniqueInput
  ): Promise<SpecialHours | null> {
    try {
      return await this.service.deleteSpecialHours({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
