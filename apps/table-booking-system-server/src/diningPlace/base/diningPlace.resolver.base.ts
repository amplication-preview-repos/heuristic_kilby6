/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DiningPlace } from "./DiningPlace";
import { DiningPlaceCountArgs } from "./DiningPlaceCountArgs";
import { DiningPlaceFindManyArgs } from "./DiningPlaceFindManyArgs";
import { DiningPlaceFindUniqueArgs } from "./DiningPlaceFindUniqueArgs";
import { CreateDiningPlaceArgs } from "./CreateDiningPlaceArgs";
import { UpdateDiningPlaceArgs } from "./UpdateDiningPlaceArgs";
import { DeleteDiningPlaceArgs } from "./DeleteDiningPlaceArgs";
import { DiningPlaceService } from "../diningPlace.service";
@graphql.Resolver(() => DiningPlace)
export class DiningPlaceResolverBase {
  constructor(protected readonly service: DiningPlaceService) {}

  async _diningPlacesMeta(
    @graphql.Args() args: DiningPlaceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DiningPlace])
  async diningPlaces(
    @graphql.Args() args: DiningPlaceFindManyArgs
  ): Promise<DiningPlace[]> {
    return this.service.diningPlaces(args);
  }

  @graphql.Query(() => DiningPlace, { nullable: true })
  async diningPlace(
    @graphql.Args() args: DiningPlaceFindUniqueArgs
  ): Promise<DiningPlace | null> {
    const result = await this.service.diningPlace(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DiningPlace)
  async createDiningPlace(
    @graphql.Args() args: CreateDiningPlaceArgs
  ): Promise<DiningPlace> {
    return await this.service.createDiningPlace({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DiningPlace)
  async updateDiningPlace(
    @graphql.Args() args: UpdateDiningPlaceArgs
  ): Promise<DiningPlace | null> {
    try {
      return await this.service.updateDiningPlace({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DiningPlace)
  async deleteDiningPlace(
    @graphql.Args() args: DeleteDiningPlaceArgs
  ): Promise<DiningPlace | null> {
    try {
      return await this.service.deleteDiningPlace(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
