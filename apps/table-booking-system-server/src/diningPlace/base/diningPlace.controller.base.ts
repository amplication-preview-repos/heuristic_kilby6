/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DiningPlaceService } from "../diningPlace.service";
import { DiningPlaceCreateInput } from "./DiningPlaceCreateInput";
import { DiningPlace } from "./DiningPlace";
import { DiningPlaceFindManyArgs } from "./DiningPlaceFindManyArgs";
import { DiningPlaceWhereUniqueInput } from "./DiningPlaceWhereUniqueInput";
import { DiningPlaceUpdateInput } from "./DiningPlaceUpdateInput";

export class DiningPlaceControllerBase {
  constructor(protected readonly service: DiningPlaceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DiningPlace })
  async createDiningPlace(
    @common.Body() data: DiningPlaceCreateInput
  ): Promise<DiningPlace> {
    return await this.service.createDiningPlace({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        ownerId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DiningPlace] })
  @ApiNestedQuery(DiningPlaceFindManyArgs)
  async diningPlaces(@common.Req() request: Request): Promise<DiningPlace[]> {
    const args = plainToClass(DiningPlaceFindManyArgs, request.query);
    return this.service.diningPlaces({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        ownerId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DiningPlace })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async diningPlace(
    @common.Param() params: DiningPlaceWhereUniqueInput
  ): Promise<DiningPlace | null> {
    const result = await this.service.diningPlace({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        ownerId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DiningPlace })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDiningPlace(
    @common.Param() params: DiningPlaceWhereUniqueInput,
    @common.Body() data: DiningPlaceUpdateInput
  ): Promise<DiningPlace | null> {
    try {
      return await this.service.updateDiningPlace({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          ownerId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DiningPlace })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDiningPlace(
    @common.Param() params: DiningPlaceWhereUniqueInput
  ): Promise<DiningPlace | null> {
    try {
      return await this.service.deleteDiningPlace({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          ownerId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
