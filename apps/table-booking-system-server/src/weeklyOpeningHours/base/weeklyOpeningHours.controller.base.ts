/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WeeklyOpeningHoursService } from "../weeklyOpeningHours.service";
import { WeeklyOpeningHoursCreateInput } from "./WeeklyOpeningHoursCreateInput";
import { WeeklyOpeningHours } from "./WeeklyOpeningHours";
import { WeeklyOpeningHoursFindManyArgs } from "./WeeklyOpeningHoursFindManyArgs";
import { WeeklyOpeningHoursWhereUniqueInput } from "./WeeklyOpeningHoursWhereUniqueInput";
import { WeeklyOpeningHoursUpdateInput } from "./WeeklyOpeningHoursUpdateInput";

export class WeeklyOpeningHoursControllerBase {
  constructor(protected readonly service: WeeklyOpeningHoursService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WeeklyOpeningHours })
  async createWeeklyOpeningHours(
    @common.Body() data: WeeklyOpeningHoursCreateInput
  ): Promise<WeeklyOpeningHours> {
    return await this.service.createWeeklyOpeningHours({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WeeklyOpeningHours] })
  @ApiNestedQuery(WeeklyOpeningHoursFindManyArgs)
  async weeklyOpeningHoursItems(
    @common.Req() request: Request
  ): Promise<WeeklyOpeningHours[]> {
    const args = plainToClass(WeeklyOpeningHoursFindManyArgs, request.query);
    return this.service.weeklyOpeningHoursItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WeeklyOpeningHours })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async weeklyOpeningHours(
    @common.Param() params: WeeklyOpeningHoursWhereUniqueInput
  ): Promise<WeeklyOpeningHours | null> {
    const result = await this.service.weeklyOpeningHours({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WeeklyOpeningHours })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWeeklyOpeningHours(
    @common.Param() params: WeeklyOpeningHoursWhereUniqueInput,
    @common.Body() data: WeeklyOpeningHoursUpdateInput
  ): Promise<WeeklyOpeningHours | null> {
    try {
      return await this.service.updateWeeklyOpeningHours({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WeeklyOpeningHours })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWeeklyOpeningHours(
    @common.Param() params: WeeklyOpeningHoursWhereUniqueInput
  ): Promise<WeeklyOpeningHours | null> {
    try {
      return await this.service.deleteWeeklyOpeningHours({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
