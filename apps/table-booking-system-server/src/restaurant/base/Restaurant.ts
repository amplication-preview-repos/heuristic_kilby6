/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  MaxLength,
  IsOptional,
  IsDate,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { ReservationBooking } from "../../reservationBooking/base/ReservationBooking";
import { Seating } from "../../seating/base/Seating";
import { Table } from "../../table/base/Table";

@ObjectType()
class Restaurant {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  address!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  phoneNumber!: string | null;

  @ApiProperty({
    required: false,
    type: () => [ReservationBooking],
  })
  @ValidateNested()
  @Type(() => ReservationBooking)
  @IsOptional()
  reservationBookings?: Array<ReservationBooking>;

  @ApiProperty({
    required: false,
    type: () => [Seating],
  })
  @ValidateNested()
  @Type(() => Seating)
  @IsOptional()
  seatings?: Array<Seating>;

  @ApiProperty({
    required: false,
    type: () => [Table],
  })
  @ValidateNested()
  @Type(() => Table)
  @IsOptional()
  tables?: Array<Table>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Restaurant as Restaurant };
