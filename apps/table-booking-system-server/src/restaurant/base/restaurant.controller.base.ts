/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RestaurantService } from "../restaurant.service";
import { RestaurantCreateInput } from "./RestaurantCreateInput";
import { Restaurant } from "./Restaurant";
import { RestaurantFindManyArgs } from "./RestaurantFindManyArgs";
import { RestaurantWhereUniqueInput } from "./RestaurantWhereUniqueInput";
import { RestaurantUpdateInput } from "./RestaurantUpdateInput";
import { ReservationBookingFindManyArgs } from "../../reservationBooking/base/ReservationBookingFindManyArgs";
import { ReservationBooking } from "../../reservationBooking/base/ReservationBooking";
import { ReservationBookingWhereUniqueInput } from "../../reservationBooking/base/ReservationBookingWhereUniqueInput";
import { SeatingFindManyArgs } from "../../seating/base/SeatingFindManyArgs";
import { Seating } from "../../seating/base/Seating";
import { SeatingWhereUniqueInput } from "../../seating/base/SeatingWhereUniqueInput";
import { TableFindManyArgs } from "../../table/base/TableFindManyArgs";
import { Table } from "../../table/base/Table";
import { TableWhereUniqueInput } from "../../table/base/TableWhereUniqueInput";

export class RestaurantControllerBase {
  constructor(protected readonly service: RestaurantService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Restaurant })
  async createRestaurant(
    @common.Body() data: RestaurantCreateInput
  ): Promise<Restaurant> {
    return await this.service.createRestaurant({
      data: data,
      select: {
        address: true,
        createdAt: true,
        id: true,
        name: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Restaurant] })
  @ApiNestedQuery(RestaurantFindManyArgs)
  async restaurants(@common.Req() request: Request): Promise<Restaurant[]> {
    const args = plainToClass(RestaurantFindManyArgs, request.query);
    return this.service.restaurants({
      ...args,
      select: {
        address: true,
        createdAt: true,
        id: true,
        name: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Restaurant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async restaurant(
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<Restaurant | null> {
    const result = await this.service.restaurant({
      where: params,
      select: {
        address: true,
        createdAt: true,
        id: true,
        name: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Restaurant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRestaurant(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() data: RestaurantUpdateInput
  ): Promise<Restaurant | null> {
    try {
      return await this.service.updateRestaurant({
        where: params,
        data: data,
        select: {
          address: true,
          createdAt: true,
          id: true,
          name: true,
          phoneNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Restaurant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRestaurant(
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<Restaurant | null> {
    try {
      return await this.service.deleteRestaurant({
        where: params,
        select: {
          address: true,
          createdAt: true,
          id: true,
          name: true,
          phoneNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/reservationBookings")
  @ApiNestedQuery(ReservationBookingFindManyArgs)
  async findReservationBookings(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<ReservationBooking[]> {
    const query = plainToClass(ReservationBookingFindManyArgs, request.query);
    const results = await this.service.findReservationBookings(params.id, {
      ...query,
      select: {
        createdAt: true,
        endTime: true,
        id: true,
        numberOfPersons: true,

        person: {
          select: {
            id: true,
          },
        },

        restaurant: {
          select: {
            id: true,
          },
        },

        startTime: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/reservationBookings")
  async connectReservationBookings(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: ReservationBookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reservationBookings: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/reservationBookings")
  async updateReservationBookings(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: ReservationBookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reservationBookings: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/reservationBookings")
  async disconnectReservationBookings(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: ReservationBookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reservationBookings: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/seatings")
  @ApiNestedQuery(SeatingFindManyArgs)
  async findSeatings(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<Seating[]> {
    const query = plainToClass(SeatingFindManyArgs, request.query);
    const results = await this.service.findSeatings(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        restaurant: {
          select: {
            id: true,
          },
        },

        seatingCapacity: true,
        tableNumber: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/seatings")
  async connectSeatings(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: SeatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      seatings: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/seatings")
  async updateSeatings(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: SeatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      seatings: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/seatings")
  async disconnectSeatings(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: SeatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      seatings: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tables")
  @ApiNestedQuery(TableFindManyArgs)
  async findTables(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<Table[]> {
    const query = plainToClass(TableFindManyArgs, request.query);
    const results = await this.service.findTables(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        restaurant: {
          select: {
            id: true,
          },
        },

        seatingCapacity: true,
        tableNumber: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tables")
  async connectTables(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: TableWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tables: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tables")
  async updateTables(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: TableWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tables: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tables")
  async disconnectTables(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: TableWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tables: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }
}
