/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ReservationBooking } from "./ReservationBooking";
import { ReservationBookingCountArgs } from "./ReservationBookingCountArgs";
import { ReservationBookingFindManyArgs } from "./ReservationBookingFindManyArgs";
import { ReservationBookingFindUniqueArgs } from "./ReservationBookingFindUniqueArgs";
import { CreateReservationBookingArgs } from "./CreateReservationBookingArgs";
import { UpdateReservationBookingArgs } from "./UpdateReservationBookingArgs";
import { DeleteReservationBookingArgs } from "./DeleteReservationBookingArgs";
import { Person } from "../../person/base/Person";
import { Restaurant } from "../../restaurant/base/Restaurant";
import { ReservationBookingService } from "../reservationBooking.service";
@graphql.Resolver(() => ReservationBooking)
export class ReservationBookingResolverBase {
  constructor(protected readonly service: ReservationBookingService) {}

  async _reservationBookingsMeta(
    @graphql.Args() args: ReservationBookingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ReservationBooking])
  async reservationBookings(
    @graphql.Args() args: ReservationBookingFindManyArgs
  ): Promise<ReservationBooking[]> {
    return this.service.reservationBookings(args);
  }

  @graphql.Query(() => ReservationBooking, { nullable: true })
  async reservationBooking(
    @graphql.Args() args: ReservationBookingFindUniqueArgs
  ): Promise<ReservationBooking | null> {
    const result = await this.service.reservationBooking(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ReservationBooking)
  async createReservationBooking(
    @graphql.Args() args: CreateReservationBookingArgs
  ): Promise<ReservationBooking> {
    return await this.service.createReservationBooking({
      ...args,
      data: {
        ...args.data,

        person: args.data.person
          ? {
              connect: args.data.person,
            }
          : undefined,

        restaurant: args.data.restaurant
          ? {
              connect: args.data.restaurant,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ReservationBooking)
  async updateReservationBooking(
    @graphql.Args() args: UpdateReservationBookingArgs
  ): Promise<ReservationBooking | null> {
    try {
      return await this.service.updateReservationBooking({
        ...args,
        data: {
          ...args.data,

          person: args.data.person
            ? {
                connect: args.data.person,
              }
            : undefined,

          restaurant: args.data.restaurant
            ? {
                connect: args.data.restaurant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReservationBooking)
  async deleteReservationBooking(
    @graphql.Args() args: DeleteReservationBookingArgs
  ): Promise<ReservationBooking | null> {
    try {
      return await this.service.deleteReservationBooking(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Person, {
    nullable: true,
    name: "person",
  })
  async getPerson(
    @graphql.Parent() parent: ReservationBooking
  ): Promise<Person | null> {
    const result = await this.service.getPerson(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Restaurant, {
    nullable: true,
    name: "restaurant",
  })
  async getRestaurant(
    @graphql.Parent() parent: ReservationBooking
  ): Promise<Restaurant | null> {
    const result = await this.service.getRestaurant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
