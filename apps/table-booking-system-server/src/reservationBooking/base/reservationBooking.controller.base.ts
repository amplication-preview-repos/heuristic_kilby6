/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReservationBookingService } from "../reservationBooking.service";
import { ReservationBookingCreateInput } from "./ReservationBookingCreateInput";
import { ReservationBooking } from "./ReservationBooking";
import { ReservationBookingFindManyArgs } from "./ReservationBookingFindManyArgs";
import { ReservationBookingWhereUniqueInput } from "./ReservationBookingWhereUniqueInput";
import { ReservationBookingUpdateInput } from "./ReservationBookingUpdateInput";

export class ReservationBookingControllerBase {
  constructor(protected readonly service: ReservationBookingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ReservationBooking })
  async createReservationBooking(
    @common.Body() data: ReservationBookingCreateInput
  ): Promise<ReservationBooking> {
    return await this.service.createReservationBooking({
      data: {
        ...data,

        person: data.person
          ? {
              connect: data.person,
            }
          : undefined,

        restaurant: data.restaurant
          ? {
              connect: data.restaurant,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        endTime: true,
        id: true,
        numberOfPersons: true,

        person: {
          select: {
            id: true,
          },
        },

        restaurant: {
          select: {
            id: true,
          },
        },

        startTime: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ReservationBooking] })
  @ApiNestedQuery(ReservationBookingFindManyArgs)
  async reservationBookings(
    @common.Req() request: Request
  ): Promise<ReservationBooking[]> {
    const args = plainToClass(ReservationBookingFindManyArgs, request.query);
    return this.service.reservationBookings({
      ...args,
      select: {
        createdAt: true,
        endTime: true,
        id: true,
        numberOfPersons: true,

        person: {
          select: {
            id: true,
          },
        },

        restaurant: {
          select: {
            id: true,
          },
        },

        startTime: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ReservationBooking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async reservationBooking(
    @common.Param() params: ReservationBookingWhereUniqueInput
  ): Promise<ReservationBooking | null> {
    const result = await this.service.reservationBooking({
      where: params,
      select: {
        createdAt: true,
        endTime: true,
        id: true,
        numberOfPersons: true,

        person: {
          select: {
            id: true,
          },
        },

        restaurant: {
          select: {
            id: true,
          },
        },

        startTime: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ReservationBooking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReservationBooking(
    @common.Param() params: ReservationBookingWhereUniqueInput,
    @common.Body() data: ReservationBookingUpdateInput
  ): Promise<ReservationBooking | null> {
    try {
      return await this.service.updateReservationBooking({
        where: params,
        data: {
          ...data,

          person: data.person
            ? {
                connect: data.person,
              }
            : undefined,

          restaurant: data.restaurant
            ? {
                connect: data.restaurant,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          endTime: true,
          id: true,
          numberOfPersons: true,

          person: {
            select: {
              id: true,
            },
          },

          restaurant: {
            select: {
              id: true,
            },
          },

          startTime: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ReservationBooking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReservationBooking(
    @common.Param() params: ReservationBookingWhereUniqueInput
  ): Promise<ReservationBooking | null> {
    try {
      return await this.service.deleteReservationBooking({
        where: params,
        select: {
          createdAt: true,
          endTime: true,
          id: true,
          numberOfPersons: true,

          person: {
            select: {
              id: true,
            },
          },

          restaurant: {
            select: {
              id: true,
            },
          },

          startTime: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
